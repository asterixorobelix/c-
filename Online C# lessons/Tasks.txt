/*(CarUppercase)
http://csharp.net-tutorials.com/classes/introduction/
Define a new class, called Car, which holds a single variable, called color. Use a color property to access the color variable.
Create a constructor for your Car class, which takes a parameter which allows us to initialize Car objects with a color. 
Also create the Describe() method, which prints out the colour of a Car. However, make sure that the color variable will be returned in uppercase characters, since we apply the ToUpper() method to it
Create several Car objects and assign different colours to them.

Sample Output:
This car is RED
This car is GREEN
*/

/*(Rectangle)
http://www.blackwasp.co.uk/CSharpClassProperties.aspx\
Create a Rectangle class. Add two private integer variables to the Rectangle class to hold the height and width.
Add width and height properties.
For both the width and height properties, if the value is negative or is greater than one hundred, display an error message and the property will remain unchanged.
Create two objects based upon the Rectangle class, Rect and square.
Ask the user to input width and height for these two objects and print out the widths and heights for the two.
Add read-only properties for the area and perimeter of the rectangle.
Print out the area and perimeter of the two shapes. 

Sample Output:
Area:2500
Perimeter: 250

Square!
Area:625
Perimeter: 100
*/

/*(MassCalculator)
http://www.blackwasp.co.uk/CSharpStaticBehaviour.aspx
Create a class named 'MassCalculator', which multiplies density*volume. 
Provide a method which accepts the density and the volume of an item and calculates its mass. The method should be overloaded in order to accept integer or double arguments.
The class will also maintain a property which counts the number of times that the calculation has been performed. 

Sample Output:
Mass: 1288
Mass: 56781,12
Mass: 6621,12
Calculator has been used 3 times
*/

/* (RectangleOverload)
http://www.blackwasp.co.uk/ConstructorOverloading.aspx
Create a Rectangle class. 
Add width and height properties.
Create overloaded constructors, so that a different constructor is called if a rectangle or a square is being created.
Create two objects based upon the Rectangle class, Rect and square.
Print out the widths and heights for the two objects.

Sample Output:
Rectangle constructor called
Width: 4, Height: 3
Square Constructor called
Width: 3, Height: 3
 */

/*(StudentTeacher)
https://www.juanantonioripoll.es/practice-exercises-c-sharp/practice-exercises-c-sharp-exercise-6-1-Classes-Student-Teacher.aspx
Create a class Person, which has an Age property and a public method called Greet, which takes no arguments and returns a greeting. 
The class Person must have a method "GetAge" which will indicate the value of their age (eg, 20 years old). 
Create a class "Student" and another class "Teacher", both descendants of "Person". 
The class "Student" will have a public method "GoToClasses", which will write on screen "I’m going to class." 
The class "Teacher" will have a public method "Explain", which will show on screen "My explanation of {subject} begins..". Also, it will have a private attribute "Subject", a string. 

Create a Person and make it say hello 
Create a student, set his age to 21, tell him to Greet, display his age and go to class. 
Create a teacher, 30 years old, ask him to say hello and then explain. 

Sample Output:
Person constructor called
Hello!

Person constructor called
Student constructor called
My age is 21 years old
Hello!
I'm going to class
Person constructor called
Teacher constructor called
My age is 30 years old
Hello!
My explanation of Geography begins..
*/

/*(VehicleInherit)
http://www.blackwasp.co.uk/Inheritance.aspx

Create the Vehicle class. We will then create subclasses of Vehicle with more specialised functionality.
Provide a Speed property and the Accelerate and Decelerate methods in the vehicles class.
We can now create a class to represent motor vehicles such as cars, buses, etc. Since a motor vehicle is a specialised type of vehicle, we can derive the class from Vehicle. 
So, create new class and name it "MotorVehicle".
Add properties to identify how many gallons of fuel are present in the vehicle and how large the fuel tank is. We can also create a method to call when the motor vehicle is refuelled.
The FuelRemaining property is read-only as it can only be changed via the Refuel method, which returns the number of gallons of fuel added to completely fill the tank.

Create another class for bicycles named "Bicycle". Bicycles can also accelerate and decelerate so modify the class so that it also inherits its functionality from the Vehicle class.
To give the Bicycle class additional functionality, let's add a method which rings the bell. In order to indicate that the rider has used the bell we will simply output a string to the console.

The basic Vehicle class will simply output a message describing the indication direction given (eg Turning left). This will be overridden in the MotorVehicle and Bicycle classes.
In the MotorVehicle class, the basic outputted message will be overridden to Flashing left/right indicator. 
For bicycles, the rider will raise their arm to indicate that they are turning so Bicycle class message should be: "Raising left/right arm"

Add a property to the MotorVehicle class which calculates the fuel efficiency of the motor vehicle in miles per gallon, with the calculation based upon the current speed of the vehicle.

Create some basic Vehicle variables but assign MotorVehicle or Bicycle objects to them

Sample Output:
Speed: 0mph
Speed: 25mph
Speed: 10mph
Fuel: 0g
Fuel: 11g
Ring!
Flashing left indicator
Turning left
Raising left arm
Flashing left indicator
Turning left
Raising left arm
*/

/* 
 * http://www.blackwasp.co.uk/Interfaces.aspx
In this article we will define interfaces and classes which represent predators and prey animals. Each animal class will implement at least one of the IPredator and IPrey interfaces.
The first interface that we will create will be implemented by all animals that are prey to predators. To use the convention for interface naming, this interface will be called "IPrey". To create the interface, add a new interface file to the project named "IPrey". 
The IPrey interface will define a property to hold the fleeing speed of prey animals. This is an important value when an animal must run away from a predator. 
The IPrey interface will include a method called when the animal attempts to escape from a predator. This method will be named "Flee" and will require no parameters.
We will also create a second interface to represent predatory animals. This interface will define a property and a method. The property will hold the attack speed of all animals that implement the IPredator interface.
The interface's method, "Attack" will be called when the predator wants to attack another creature. This method will accept a single parameter containing the prey animal to be attacked. So that any prey animal may be attacked, the parameter will be of the IPrey type.
Create a class for cats. The class will implement the IPredator interface. To create the class, add a new class file to the project and name it "Cat". 
Create a Cat-specific "Purr" method
Add a new class file named "Fish"
Test the cat and fish classes using the Main method of the program. For this simple test, we will create both a cat and a fish object before making the cat try to attack the fish. 
We have declared a class for fish and implemented the IPrey interface. Of course, fish can be predators too so we can sensibly implement the IPredator interface for this class. 
*/