Microsoft
https://msdn.microsoft.com/en-us/library/cs8hbt1w(v=vs.90).aspx
https://code.msdn.microsoft.com/Visual-Studio-2010-SDK-ddfe1372

c# Tutorial
http://csharp.net-tutorials.com/classes/introduction/

A variable can be compared to a storage room, and is essential for the programmer. In C#, a variable is declared like this: 
<data type> <name>; 

An example could look like this: 
string name; 

That's the most basic version. Usually, you wish to assign a visibility to the variable, and perhaps assign a value to it at the same time. It can be done like this: 
<visibility> <data type> <name> = <value>; 

And with an example:
private string name = "John Doe";

A function allows you to encapsulate a piece of code and call it from other parts of your code. You may very soon run into a situation where you need to repeat a piece of code, from multiple places, and this is where functions come in. In C#, they are basically declared like this:
<visibility> <return type> <name>(<parameters>)
{
	<function code>
}

The out modifier
The out modifier works pretty much like the ref modifier. They both ensure that the parameter is passed by reference instead of by value, but they do come with two important differences: A value passed to a ref modifier has to be initialized before calling the method - this is not true for the out modifier, where you can use un-initialized values. On the other hand, you can't leave a function call with an out parameter, without assigning a value to it. Since you can pass in un-initialized values as an out parameter, you are not able to actually use an out parameter inside a function - you can only assign a new value to it. 

The params modifier
So far, all of our functions have accepted a fixed amount of parameters. However, in some cases, you might need a function which takes an arbitrary number of parameters. By using the params keyword, you can specify a method parameter which takes a variable number of arguments.
You can send a comma-separated list of arguments of the type specified in the parameter declaration or an array of arguments of the specified type. You also can send no arguments. If you send no arguments, the length of the params list is zero.

Properties allow you to control the accessibility of a classes variables, and is the recommended way to access variables from the outside in an object oriented programming language like C#.
A property is much like a combination of a variable and a method - it can't take any parameters, but you are able to process the value before it's assigned to our returned. A property consists of 2 parts, a get and a set method.
Constructors are special methods, used when instantiating a class. A constructor can never return anything, which is why you don't have to define a return type for it. A normal method is defined like this:

public string Describe()
A constructor can be defined like this:
public Car()
A constructor can be overloaded as well, meaning we can have several constructors, with the same name, but different parameters. 

Encapsulation
Encapsulation,also known as data hiding, is an important object-oriented programming concept. It is the act of concealing the functionality of a class so that the internal operations are hidden, and irrelevant, to the programmer. With correct encapsulation, the developer does not need to understand how the class actually operates in order to communicate with it via its publicly available methods and properties; known as its public interface.
Encapsulation is essential to creating maintainable object-oriented programs. When the interaction with an object uses only the publicly available interface of methods and properties, the class of the object becomes a correctly isolated unit. This unit can then be replaced independently to fix bugs, to change internal behaviour or to improve functionality or performance.
In the real world, this is similar to replacing a lightbulb. As long as we choose the correct bulb size and connection (the public interface), it will work. It does not matter if the manufacturer is different or the internal workings of the bulb differ from the original. It may even offer an improvement in brightness!

Public methods are part of the class's public interface, ie. these are the methods that can be called by other objects.
To provide for encapsulation, where the internal functionality of the class is hidden, some methods will be defined as private. Methods with a private protection level are completely invisible to external classes.
To define a method as private, the private keyword can be used as a prefix to the method. Alternatively, using no prefix at all implies that the method is private by default.

To define a class-scoped variable, the declaration is made within the class's code block but outside of any methods or properties. Although not required, it is useful to precede the variable declaration with the private keyword to make the code clear and easy to read. 

A final keyword to consider is "this". The "this" keyword can be used within a class's code to refer to the current instantiated object. 
The "this" keyword does have another use. If a method is being called and the current object is to be passed to that method, setting a parameter to "this" achieves the desired result. 

In order to set properties, an object is instantiated and the property values are assigned individually. This gives the desired result but is not ideal as it is possible for a property to be forgotten and left undefined, possibly leaving the entire object in an invalid state. This problem is solved with the use of constructors.
A constructor is a special class member that is executed when a new object is created. The constructor's job is to initialise all of the public and private state of the new object and to perform any other tasks that the programmer requires before the object is used.
The syntax to add a new constructor to a class is similar to that of adding a method. However, the constructor has the same name as the class and does not include a return type.

Sometimes you will want to create behaviour that is not linked to any individual object, instead being available to all instances and to objects of other classes. This is where static members become useful.
Static methods are useful when creating functions that are not reliant on any instance of a class. In order to call a static method, the class name and method name are used, separated by a full stop (or period). 
It is important to understand that static methods may not directly use non-static members. It is invalid for one static method to directly call a non-static method or property without first instantiating an object. Similarly, private variables that are not marked as static cannot be utilised by a static method. The reverse of this is not true of course, as a non-static member can call a static method.
A static constructor is used to initialise the static state of a class when it is first used. This is similar to a standard constructor with some exceptions. A static constructor is always declared as private and as such may not be directly called by a program. A static constructor therefore has no facility to add parameters. It is also not possible to include a static destructor.
To add a static constructor, create a private constructor with the static keyword as a prefix. 

Polymorphism permits objects to behave in different ways according to the manner in which they are used. One part of polymorphism is the ability for a method to behave differently according to the types and number of parameters that are passed to it. This is achieved through method overloading.
In order to use overloaded methods, the signature must differ for each method declaration. This means that every overloaded method in a class must have either a different number of parameters or a different set of argument data types to every other method with the same name. However, the return type of the method is not included in this signature. This means that two methods that differ only in return type cannot be created in the same class.
Where parameters are passed by reference, they are considered to be different to those passed by value. This means that it is valid to have an overloaded method with the same set of parameter data types if one version passes parameters by value and the other by reference.

Creating an overloaded constructor is as simple as adding overloaded methods. To add a second constructor, we simply declare another variation with a different signature. Overloaded constructors can be used to instantiate objects in exactly the same manner as for classes with a single constructor. During compilation of the code, the compiler compares the signature used for the new object to those available in the class. If there is a perfect match, the corresponding constructor is used. Where there is no signature with the correct parameters, the compiler will look for a constructor that can be used with implicit casting. If no such constructor exists, a compiler error occurs.
Constructors can be very complex, performing many initialisation and validation functions for new objects. This can easily lead to large constructors with functionality that is repeated in each overloaded version. This, in turn, can lead to maintenance problems with the code when changes to construction logic are required. This can be minimised by having the constructor call methods within the class to perform common tasks. Another option is to allow code reuse by having the constructors call each other during object instantiation.
To create a constructor that calls an existing constructor, a special syntax is used. The constructor is declared as usual and then a colon character (:) is appended. After the colon the this keyword and the parameter list of the called constructor is provided. Each parameter specified in the call must match one of those in the new constructor or be a literal value.

public Constructor(parameters-1) : this(parameters-2) { }

When the new constructor is utilised, the constructor indicated in the this command is executed first, then the code within the new constructor's code block is run. It is possible that the code block is empty where only a transformation of signature is required. In this case, only the original constructor is executed with the specified parameters.

What is a Delegate?
A delegate is a special kind of object that holds a reference to a method. The delegate can be called as if it were any other method. However, when called, the underlying referenced method is executed. This simple layer of abstraction is useful because unlike a direct call, the method being used does not need to be known when writing the code. The reference is created at run-time and may be changed repeatedly throughout the life of the executing program.
NB: If you have previously used C++ function pointers then you will see many similarities between these and delegates. Unlike function pointers, C# delegates are object-oriented, secure and type-safe.

Namespaces allow classes, structures and other items to be grouped and organised and remove the possibility of class-naming conflicts.
The .NET framework provides a huge number of base classes, data types, algorithms, etc. If every one of these items had to be declared with a unique name, the naming task would be equally large and would leave very few good names available for the .NET developer.
To ensure that naming conflicts do not occur, either within the .NET framework or in your own programs, namespaces are used. A namespace simply provides a named group of classes, structures, enumerations, delegates, interfaces and other namespaces. Within the namespace, all declared items must be uniquely named. However, the same name may be duplicated in different namespaces. This means that if you decide to create a mathematics library you will be able to call it 'Math' even though Microsoft have also provided a Math library.
All definitions are created in a namespace, even if one is not explicitly declared. The .NET framework provides the default namespace, which is used automatically for any code that is written outside of any namespace declaration. This can be useful for short programs but has the drawback that all of the benefits that namespaces bring to organising your code are lost.
Namespaces are declared using the namespace keyword. The basic syntax for creating a namespace is very simple, requiring only a name for the new grouping and a code block surrounded by braces:
namespace namespace-name {}

Namespace declarations are additive. This means that the same namespace definition can be included in your code in multiple locations. Where two or more matching declarations are made, the contents of the two namespaces are combined into one. This is especially useful when an application can be deployed in different versions as the optional code can be placed in separate code files. The files can then be "swapped in" to create the various build configurations.
If you were required to prefix every use of every class, structure, enumeration, etc. with the name of the namespace that contained it, your code would become unwieldy. To avoid this the using directive can be used. You will already have seen this directive in action at the start of almost every code file that you have created.
The using directive tells the compiler that a namespace is in use by the code. When the compiler finds a class name that is not recognised in the current namespace, it instead checks each namespace defined in a using directive to see if the item exists there. This means that the fully qualified name for items within such a referenced namespace need not be used.
However, where two using directives are included and each referenced namespace contains a matching class name, a name conflict is created.
Now that both of the additional namespaces are referenced the compiler does not know which Test class to use when creating the object in the Main method. 
This problem could be resolved by simply providing the fully qualified name when using the Test classes. However, namespace names can be very long and this presents the original problem of making the code more difficult to read. Instead, the using directive can be used to create an alias. This allows a shorter name to be linked to a namespace and to be used instead of the namespace to qualify the class.
In addition, namespaces may be created within other namespaces to create a nested categorisation. This allows for deep tree structures to be created and for great control over the organisation of code modules.
Consider the following nested namespace declarations:

namespace Parent
{
    namespace Child
    {
        namespace Grandchild
        {
            class Test
            {
                public void ShowMessage()
                {
                    Console.WriteLine("This is a nested namespace!");
                }
            }
        }
    }
}

In this situation there are three levels of namespace with each declared inside its parent. The "Test" class is declared within the third level of nesting. To access this class using its fully qualified name, all three namespaces must be specified with each prefixing its child and separated using a full stop. The fully qualified name for the Test class is therefore "Parent.Child.Grandchild.Test".
As with single layer namespaces, a using directive can be added to remove the requirement to use the fully qualified name. In this case, the using directive would be:
using Parent.Child.Grandchild;

Inheritance is one of the most important, and most powerful, of the object-oriented programming concepts. Using inheritance, one class can be derived from another. The derived class, also known as the child class or subclass, inherits functionality from the base class, also known as the parent class or superclass. The subclass can add methods and properties or modify the functionality that it has inherited to provide a more specialised version of the base class.
Using inheritance, classes become grouped together in a hierarchical tree structure. The more generalised classes appear at the root of the hierarchy with the more specific classes appearing on the tree's branches. 
When using inheritance, all of the base class's methods, properties, events, indexers, operators and some internal variables are all automatically provided to every subclass. As this functionality is automatically available in the child class, there is no need to duplicate code. This reduces maintenance problems, as changes need only to be made in one class, rather than throughout a series of related classes.
The syntax for declaring a derived class is similar to that for any other standard class. To specify the base class to inherit from, its name is appended to the subclass declaration, separated by a colon (:) as follows:
class subclass : baseclass

An interface can contain public members such as properties and methods but these members must have no functionality. Instead, they define items which must be made concrete within all classes that implement the interface. This means that an interface can be used to define what a class must do, but not how it will be achieved.
Many classes may implement a single interface. This increases polymorphism by enabling classes to behave in many different ways depending upon their usage. For example, a Customer class, an Employee class and a Business class may all implement the IWriteable interface. A class can also implement many interfaces.
When a property is added to an interface it acts as a placeholder only, containing no functionality of its own. The functionality is added by the individual classes that implement the interface. Interface property declarations are therefore comparable to abstract property declarations and use a similar get and set accessor syntax. However, as all members of interfaces are public by definition, the "public" keyword is omitted.
Methods may be created within interfaces. As with properties, the method must not include an access specifier or a code block. Otherwise, the declaration uses the same syntax as a standard method.
Once an interface has been declared, one or more classes may implement it. Each class that implements an interface must make concrete all of the interface members. This is achieved by simply declaring all of the methods, properties, indexers, etc. that have been defined in the interface. In each case, the signature of the item from the interface must be exactly matched within the class implementing it.
To create a class that implements an interface, the syntax is similar to that of inheritance. The new class named is followed by the name of the implemented interface. The two names are separated with a colon character (:). Where a class is also inheriting from a base class, the parent class's name follows the colon. The implemented interface name is then appended, separated from the base class name using a comma.
A class may implement many interfaces. These may be implemented in addition to inheritance from a base class. 
An interface is declared in a similar manner to a class. The definition of the interface appears in a namespace, or within the default namespace. The interface's name is prefixed with the interface keyword and requires a code block to contain the members that it defines.
interface interface-name {}
The "I" prefix for an interface is a recognised naming convention.
Using polymorphism techniques, it is possible to declare a variable using an interface as its type. Although an interface cannot be instantiated, such a variable can be assigned an object of any type that implements the interface. 

Polymorphism is an important object-oriented programming concept. When using inheritance, polymorphism is achieved when an object of a derived class is substituted where an instance of its parent class is expected. This uses a process known as upcasting. With upcasting, the object of the more specialised class is implicitly cast to the base class type required.
The conversion between a child class and its parent is performed implicitly. The reverse is not true. If, for example, a Vehicle variable contained a MotorVehicle object, it could not be assigned directly to a MotorVehicle variable. In this case, an explicit cast would be required as shown below:
Vehicle car = new MotorVehicle();
MotorVehicle theCar = (MotorVehicle)car;    // Explicit cast

Name hiding is a similar concept to overriding. With name hiding, a new version of a member or variable is created in a child class to replace or extend the parent's version. However, rather than using the override keyword, the new keyword prefixes the declaration.
The main functional difference between name hiding and overriding is that the polymorphism effect is lost. When a derived class instance is assigned to a variable of the base class type, the functionality of the base class member is executed rather than the functionality of the method causing the name hiding.
Name hiding is useful if you do not have control over a base class. This may be because it is part of a library for which you do not own the source code. If a member of a base class is not marked as virtual then you may not override it. However, even non-virtual members may be hidden.

The protected access modifier. A protected item is generally as visible as if it were private except for one special case. If an item in a base class is declared as protected, it is visible to its subclasses.

In some situations you may want to prevent inheritance. For example, you may create a class for use by other programmers where the class contains security functionality that must not be modified. To indicate that a class may not be inherited you can prefix the class definition with the sealed keyword.
For instance the Vehicle class could be modified as follows:
sealed class Vehicle

As with any other class, a subclass (derived class) with no constructors defined is provided with a default constructor which provides no explicit functionality. The constructors from the base class are not made available when creating new subclass object instances.
When a subclass is instantiated, the standard behaviour is for the default constructor of the base class to be called automatically. In this way, the base constructor can initialise the base class before the subclass's constructor is executed.
When there are more than two levels of inheritance, the least specialised class's constructor is called first with each constructor down the tree called in turn until the specifically instantiated class' constructor is finally executed.

There are two situations where this is inappropriate. Firstly, the base class may contain much more useful constructors that accept parameters. Secondly, if the base class does not include a default constructor the program will not compile unless an alternative is provided.
One base constructor will always be called when a new object is created. However, the choice of base constructor to execute can be changed using the base keyword. The base keyword is used in a similar manner as the "this" keyword in constructor overloading. The constructor declaration is declared as usual, then a colon character (:) is appended. After the colon the base keyword and the parameter list of the base constructor to call is provided. Each parameter specified in the call to the base class must match one of those in the new constructor or be a literal value.
public Constructor(parameters-1) : base(parameters-2)
{
}

A constructor can be declared as protected in a base class. This constructor will not be available for use externally except within subclasses