using Microsoft.AspNetCore.Mvc;//this namespace is required for the inheritance from the Controller base class
using OdeToFood.Services;
using OdeToFood.ViewModels;

namespace OdeToFood.Controllers
{
    public class HomeController: Controller //this controller inherits from a base class called Controller, provided by the MVC framework
    {//when you render a view from a Controller called Home, mvc looks inside a folder called Views for a folder called home (which are the views associated with the controller called home).

        //These private variables allow for the data which they carry to be accessible within the HomeController class, but not outside of it.
        private IRestaurantData _restaurantData;
        private IGreeter _greeter;

        //injecting IRestaurantData and IGreeter
        public HomeController(IRestaurantData restaurantData, IGreeter greeter)//constructor. Requires that you bring in the OdeToFood.Services namespace
        {
            _restaurantData = restaurantData;
            _greeter = greeter;
        }
        public IActionResult Index()//It will then look for a view inside in this case /views/home/Index, because we returned the View from the Index action.
        {
            var model = new HomePageViewModel(); //Instantiate an instance of HomePageViewModel

            //populate HomePageViewModel
            model.Restaurants = _restaurantData.GetAll();
            model.CurrentMessage = _greeter.GetGreeting();

            return View(model);//the model is just an object which carries the information to the View.
        }
			//View models can be used as inputs or outputs to a controller action
			//in this method, we want to show the details of a specific restaurant, so that they may be changed by the user. 
        public string Details(int ID)//This action will show the details of a specific restaurant, rather than all the restaurants, like the Index view shows.
            //Since this will require an input parameter (which restaurant's details do you want to see?). The ID parameter will be used to uniquely identify the restaurant.
            //An input model will be required for this. 
        {
            return ID.ToString();//for right now, its just returning a string which it has gotten from the ID parameter of the URL
            //http://localhost:52939/home/details/2 returns a string of 2
        }
    }
}