https://app.pluralsight.com/library/courses/mvc4-building/table-of-contents

Router
The router examines incoming URLs and determines which controllers and actions to call. It also generates the outgoing URLs.
url: "{controller}/{action}/{id}"

Model, Controller, View
Controller - provides action methods and builds the model
Model - carries data and logic
View - transforms model into HTML

@model - using statement for Razor (@model BuildingMVCApplications.Models.AboutModel) for the class
@Model - object instance passed into the view

<p>@Html.ActionLink("Details", "Details","Machine", new { id = "QualityControlRig"}, new { @class = "btn btn-default btn-large"})</p>
@*html.actionlink("linkText","actionName","controllerName","routeValues","htmlAttributes") *@
@Html.ActionLink("Your profile", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })

Tab and Shift+Tab is to increase/decrease indent.

can return Json in an ActionResult. eg: return Json(Object data)

Entity framework will create a database the first time that a db is needed, even if one doesn't exist yet.
The configuration class is about controlling code first migrations.

Rolling back a migration:
Update-Database -TargetMigration:"name_of_migration"

Linq using extension methods and Lambda expressions

@Html.DisplayFor(model => model.RestaurantName)
            @*DisplayFor helper method is a strongly typed extension method. It generates a html string for the model object property specified using a lambda expression.*@
            @*Html.DisplayFor() will render the DisplayTemplate that matches the property's type.*@
            @*This is useful if your Model has a Data annotation. For instance, if the property on the model is decorated with the EmailAddress data annotation, DisplayFor will render it as a mailto: link.*@

@Html.DisplayNameFor(model => model.RestaurantName)
            @*The DisplayNameFor shows the name of the property or the string defined in the display attribute for the property.*@
            @*    [Display(Name = "Current name")]
                  public string Name { get; set; }
              This would display Current name, rather than just Name*@

<connectionStrings>
    <add name="DefaultConnection" connectionString="Data Source=(LocalDb)\MSSqlLocalDb;Initial Catalog=Data.DataContext;Integrated Security=True"
      providerName="System.Data.SqlClient" />
</connectionStrings>

Making the two navigation properties (Blog.Posts and Post.Blog) virtual. This enables the Lazy Loading feature of Entity Framework. Lazy Loading means that the contents of these properties will be automatically loaded from the database when you try to access them.

